package com.mods.combatzak.tftweaks;

import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.eventhandler.EventBus;
import cpw.mods.fml.common.versioning.ArtifactVersion;
import cpw.mods.fml.common.versioning.VersionParser;
import cpw.mods.fml.relauncher.IFMLLoadingPlugin;
import net.minecraft.launchwrapper.Launch;

/**
 * Core mod that modifies Thermal Foundation to fix some bad changes made in latest build
 * 
 * @author CombatZAK
 *
 */
@IFMLLoadingPlugin.Name("TF Tweaks ASM")
@IFMLLoadingPlugin.MCVersion("1.7.10")
@IFMLLoadingPlugin.SortingIndex(2010)
public class TFTweaksCore implements IFMLLoadingPlugin {
	
	/**
	 * Indicates whether or not the mod is currently loaded in an obfuscated environment
	 */
	public static final boolean obfuscated;
	
	/**
	 * Static initializer checks for obfuscated runtime
	 */
	static {
		boolean testObfuscation = true;
		try {
			testObfuscation = Launch.classLoader.getClassBytes("net.minecraft.world.World") == null;
		}
		catch (IOException ex) {}
		
		obfuscated = testObfuscation;
	}
	
	/**
	 * Mod Container for TFTweaksCore
	 * @author CombatZAK
	 *
	 */
	public static class TFTweaksContainer extends DummyModContainer {
		public static final String MODID = "tftweaks";
		public static final String MOD_NAME = "TFTweaks";
		public static final String MOD_VERSION = "0.0.1";
		
		@Mod.Instance("tftweaks")
		public static TFTweaksContainer instance;
		
		public TFTweaksContainer() {
			super(new ModMetadata());
			
			ModMetadata metadata = super.getMetadata();
			metadata.name = MOD_NAME;
			metadata.modId = MODID;
			metadata.description = "Applies ASM updates to ThermalFoundation to fix some bad Ore Dictionary registrations";
			metadata.version = MOD_VERSION;
			metadata.authorList = Arrays.asList(new String[] { "CombatZAK" });
			metadata.credits = "Thanks to the CoFH team for their incredible work on Thermal everything.";
			metadata.autogenerated = false;
			metadata.parent = "ThermalFoundation";
			metadata.dependencies = Arrays.asList(new ArtifactVersion[] { VersionParser.parseVersionReference("ThermalFoundation") });
			instance = this;
		}
		
		@EventHandler
		public void preInit(FMLPreInitializationEvent event) {
			if (!Loader.isModLoaded("ThermalFoundation"))
				throw new RuntimeException("Thermal Foundation must also be present for TFTweaks to work.");
		}
		
		public boolean registerBus(EventBus bus, LoadController controller) {
			bus.register(this);
			return true;
		}
	}
	
	///IFMLLoadingPlugin implementation

	/**
	 * Gets the set of class transformers to execute
	 */
	@Override
	public String[] getASMTransformerClass() {
		return new String[] { "com.mods.combatzak.tftweaks.asm.TransformTFItems" };
	}

	/**
	 * Gets the mod class
	 */
	@Override
	public String getModContainerClass() {
		return "com.mods.combatzak.tftweaks.TFTweaksCore$TFTweaksContainer";
	}

	/**
	 * Not used
	 */
	@Override
	public String getSetupClass() {
		return null;
	}

	/**
	 * Not used
	 */
	@Override
	public void injectData(Map<String, Object> data) {
		
	}

	/**
	 * Not used
	 */
	@Override
	public String getAccessTransformerClass() {
		return null;
	}
}
